## THEORY PART ##

Previously there was Realtime data implementation i.e MVC framework

MVC -> Model View Controller
    -> Model (i.e Database) , View (i.e Display/Screen) , Controller (i.e business logic that connects Model-View / also called Server)
    
> Socket.io plays vital role in realtime data implementation

// Firebase
- A Realtime database
- also called as Baas (Backend as a service)
- Uses MVC Framework
- Any changes done in Model, also changes the View by Controller. This concept ccalled 3-way data binding
- History: It is made by 3 students in Australia as FYP with following MVC framework. Google bought in billions and is property of google now.

// Why Learn Firebase?

For ex: Flutter App you're using is called Client-side application, and working behind your App, that computer is called server. Server has mechanical that stores data called database. 
Previously we have displayed data through RestAPI. A data stored somewhere in server. We can create our own server.
To Create own server application. first we write client-side application in Flutter, and back-end application that communicates in flutter. 
But Creating these applications has its own cost and management. since you can't create back-end app using flutter, so need to learn another language for back-end which is time consuming and not cost-effective. Client wants to build product faster. To Solve this problem, we use Firebase!

> Summary: Firebase is shortcut for creating backend application in flutter, without learning another language for it!
> Don't have to write any backend, just Use it!

// Firebase vs MongoDB ?
> MongoDB is just database, Can't connect MongoDB directly with flutter, because MongoDB runs on server, so you have to learn and create server first.
- Since Server contains database. you need to communicate server first for data, then gives you database!
> Firebase is complete Package! gives you database, storage, server and many more!

// Authentication - Service
- Provides the sign-in sign-up mechanism easily.
> Go to firebase > Authentication > Sign-in method > Enable Email/Password
> Go to Users > Add User > Add any Email with password

// Firebase Database - Service
- Firebase Provides 2 types of Database: Realtime Database and FireStore [both are realtime!]
- Firestore is common and is new!
- It is also No-SQL database as well as Document-based database. like MongoDB.
+ In SQL, you store data in rows and columns, but in this you store data in Collection and documents. If you learn this, then MongoDB is easy for you.
- Location must be closed to Client's location
- Test Mode is Public access @ 30 days, Production mode is private. means any user cant access data.
- Collection -> Folder
- Collection ID -> Name should be something you're needed for ex: in ChatAPP Post, Message, Users etc.
- Document -> Folder within Folder with data.
- Fields -> Should be like Post>User_name>title,description,reactions
> Go to FireStore database > Create > Test Mode > Location > enable > Create Collection > Create Document > Write Fields with values[optional]

// Sync vs Async?
- Sync: Runs immediately - Halts Execution of other processes
- Async: Does not Halts Execution of other processes

Ex: In Uploading videos, if sync is used then other works will freeze until it uploads. with Async, other processes also works and doesnt halts!

// MultiDex - Error Fixing
> MultiDex is used if your build file exceeds 64K limit
> Go to /android/app/build.gradle
> defaultConfig -> multiDexEnabled true,

// Sound Null safety - Error Fixing
- Update Flutter to latest version
- Update all firebase packages to latest version

// Tip 
> If your account exceeds 10 apps project limit in firebase, then use another google account. Then Join secondary account with primary account by ownership!
> Go to Firebase Overview panel > top right Gear Icon > Project settings > users and permissions > add Member > add Secondary Google account as Owner!
> All projects in primary can also be used in secondary account!


## END OF THEORY PART ##



// SafeArea() - widget
- For Showing widget a little bit bottom from status bar or notch!
- child: 

// User Authentication using Firebase

// TextField() - widget
- decoration: InputDecoration()
- + border: OutlineInputBorder(),
- + hintText: "Enter Your Password",

// ElevatedButton()
- onPressed: (){}
- child: Text("Elevated Button")

// Firebase - Initializating and configuring for first time!

> Go to https://firebase.flutter.dev/docs/overview/
> Follow instructions on how to install firebase in flutter

> Go to firebase.com and set-up firebase for android in flutter, follow instructions!
> Android Package Name -> android/app/build.gradle -> applicationID
> google-services.json -> android/app/

> Convert Void main() to async, and Paste these Codes:
- WidgetsFlutterBinding.ensureInitialized();
- await Firebase.initializeApp();


- final Future<FirebaseApp> _initialization = Firebase.initializeApp();  -> Any Widget() [UNCONFIRMED]
  
  
// Wrap MaterialApp() widget with FutureBuilder()
// future is _initialization variable. we created below.
- future: FIREBASE_INITIALIZATION,
- builder: (context, snapshot){

    if(snapshot.hasError){
        return WIDGET();
    }
    
    if(snapshot.connectionState == connectionState.done){
        return MaterialApp();
    }
    
    [ OPTIONAL - for Waiting Widget! ]
    return WIDGET();
    
}

// firebase Authentication & Registration initialiation!
:- Registering Email & Password by TextField() and ElevatedButton()

// Links
- https://firebase.flutter.dev/docs/auth/usage/

// Add Firebase Auth in your Project!
- flutter pub add firebase_auth
- flutter pub get

// import Library
- import 'package:firebase_auth/firebase_auth.dart';

? To Grab all Data inputs from Textfield() to ElevatedButton()

> Initialize this Variable:
- FirebaseAuth auth = FirebaseAuth.instance;

- final TextEditingController _UsernameController = TextEditingController();
- final TextEditingController _EmailController = TextEditingController();
- final TextEditingController _PasswordController = TextEditingController();
+ TEC is a class that manages the input data you're doing!
+ Controller lets you grab values from input to button!
+ To have Default value already add "text: "dasdsadsadas" " property,

> add "controller: CONTROLLER_NAME " property in TextField() - Widget

> onPressed: - Add Method
- onpressed: ()=>Method(),
> Define these variables inside method:
- final String userName = _UsernameController.text;
- final String Email = _EmailController.text;
- final String password = _PasswordController.text;
+ Password length should be >>>> 5 !
- ex:
void Register(){
final String userName = _UsernameController.text;
final String Email = _EmailController.text;
final String password = _PasswordController.text;
}

> Convert Method() to 'Future Method async()'
> To Create NEW User with Email and Password? Add these Lines:
- Try{

    await auth.createUserWithEmailAndPassword(email: email, password: password);

} on FirebaseAuthException catch(e){
    ANY ERROR;
    
    // To check exact reason of error! i.e if password of email incorrect?
    print(e.message);
}



// Firebase FireStore - initialization

> Go to https://firebase.flutter.dev/docs/firestore/overview/
> Follow instructions

- flutter pub add cloud_firestore
- import 'package:cloud_firestore/cloud_firestore.dart';

// FireStore - Writing Data [i.e creating collection-documents-collection] by Widget!

// Link 
- https://firebase.flutter.dev/docs/firestore/usage#writing-data

// Initialize variable
- FirebaseFirestore db = FirebaseFirestore.instance;

> Follow Coding from GrabData() async method! - from Try{} block!

// Create New Collection Documents
- db.collection("users").doc("USER_ID")

> To have Each Users with Unique ID [i.e for ex: there are 100+ izhans in facebook, to uniquely identify them, we identify them as UID ]

- Convert "await auth.createUserWithEmailAndPassword(email: email, password: password);"
- to "final UserCredential users = await ..."

// This will create Users Collection with each User's Unique ID document as well as Each user has Email and password in fields!
- await db.collection("Users").doc(users.user!.uid).set({
    "email": email,
    "username": username,
});

// NOTE: Firebase Does not takes Same value each time. you can use any way to show error that user is already registered by snackbar!


// Firebase Authentication - Sign In / Log in / verfitication

// Follow Coding same as Registration, just remove username
// clear Try{} block

// Add these variables
- final UserCredential user = await auth.signInWithEmailAndPassword(email: email, password: password);
- final DocumentSnapshot SS = await db.collection("Users").doc(user.user!.uid).get();
+ DocumentSnapshot - returns the snapshot of the Collection.Document[FIELDS] data

// To Print Snapshot
- final data = SS;
- print(data["username"]);
- print(data["email"]);


// Routing Multiple Screens Easier ?

> Add the following lines in MaterialApp():
- routes: {
    "/login" : (context) => LoginForm(),
    "/signup" : (context) => RegisterForm(),
    "/home" : (context) => Home(),
}
> To Navigate, use this in any Button!
- Navigator.of(context).pushNamed("/home");

// To view Realtime changes in a widget [for Ex: Post() in facebook]

// Link
- https://firebase.flutter.dev/docs/firestore/usage#realtime-changes

// Initialize variable in your Secondary Widget()
- Stream collection_Stream = FirebaseFirestore.instance.collection("posts").snapshots();

// StreamBuilder() - Widget
- Similar to FutureBuilder(), but has Realtime changes ability, whenever found changes in data, it updates itself.

// NOTE: Copy the entire code from Link. and Do follow:
> You have to mention <QuerySnapshot> data in stream, snapshot each explictly
> Replace ListView() - with any custom widget you've created!
> Remove Map<String, dynamic> prefix - or else Code will not work

// To get data from one widget to another. Create constructor on 2nd widget!

++ Since StreamBuilder() from Website is more complex, use this simplified version!

// Intialize Variable
final Stream SS = FirebaseFirestore.instance.collection("posts").snapshots();

// StreamBuilder() Area
        body: StreamBuilder(
          stream: SS,
          builder: ((context, AsyncSnapshot snapshot) {
            if(snapshot.hasError) return Text("No Data!");

            return ListView.builder(
              itemCount: snapshot.data!.size,
              itemBuilder: ((context, index) {

                String title = snapshot.data.docs[index]["title"];
                String description = snapshot.data.docs[index]["description"];
                String url = snapshot.data.docs[index]["url"];
                
                return ListTile(
                  title: Text(title),
                  subtitle: Text(description),
                  leading: CircleAvatar(backgroundImage: NetworkImage(url), radius: 30),
                );
}));}),),),);

// NOTE: Use snapshot.data.size; instead of snapshot.data.length;

// If you Don't use SteamBuilder() then, for ex: in whatsapp chat.. you have to close/reopen app everytime whenever recieves any msg from others!

### Firebase Storage & Auth ###


// To Display any Dialog on Error?
- In Exception block catch(e):
{
    showDialog(
        context: context,
        builder: (BuildContext context){
            return AlertDialog(
                child: Text(e.message),
            )
        }
        );
}

- AlertDialog() widget is used in a showDialog() builder Method!

// Expanded() - widget
- Stretches all widgets in a Available space
- useful for putting multiple widgets in a smaller room space

// Firebase Storage from Website - Uploading and Url of image?
- Upload Image
- click on Image
- go to bottom of "File Location" > "Access Token" click text
- it will give you url of your uploaded image



/// To Upload Image from Phone's Gallery? & Store it on Firebase Storage?

// firebase cloud Storage - Initializing
- flutter pub add firebase_storage
- flutter pub get



// image_picker Package for Uploads
- flutter pub add image_picker
- flutter pub get
- import image_picker package

// Initializing Image Picker!

> Create Async method() and initialize these variables!
- final ImagePicker _picker = ImagePicker();
- final XFile? image = await _picker.pickImage(source: ImageSource.gallery);

> Put that Async Method() in ElevatedButton() - widget



