### THEORY ####

// Technologies going to use for backend development
1. Nodejs
2. Expressjs
3. MongoDB


// Nodejs

- Javascript based library
- Backend technology
- based on Server-side implementation
- follows MVC framework [Model: database, View: Client-Display, Controller: Logic-connects M+V]
- a Backend platform built on a V8 Engine of Google Chrome
+ V8 Engine based on C++, Does 2 things: helps running browser and helps in JS Application!
- Open Source platform as well as Cross-platform! works on windows, linux, and mac etc.

- NodeJS Uses:
> Server-side apps
> Mobile apps
> web apps
- Realtime-Application as well! DIRT (Data intensive real-time)
> JSON Api Based Apps
> Single Page Application

- Node JS = Runtime Environment + JS Library

- High Demand in jobs Market
- Famous Applications like GoDaddy, Yahoo, Microsoft, PayPal, UBER are using Nodejs in backend


- We Have 2 types of Application:
1. Client-Side [Frontend App]  [User-interaction]  [HTML CSS, Flutter, React Native]
2. Server-side [Backend App]   [Bridge/Medium/Agent/Connects between Client-side and Database]


- We have 2 types of Database:
1. Local Database [on HDD, on Laptop] [Client-Side]
2. Remote Database

- Some Databases have free storage like MongoDB(512MB) and firebase (1GB), if exceeds then charge you

CLIENT Request-> SERVER Request-> DATABASE
CLIENT <-Responce SERVER <-Responce DATABASE


API: interface that creates connection between computer(front-end) and computer programs(database, other programs)
- Offering services to other pieces of softwares
- Types of APIs are: Open API, internal, Partner, composite and RestFul API

> Mostly in NodeJS Apis are used are RESTApi
> RESTApi: API that retrieves, send and store data in JSON  or Object format

> API Methods:
- POST() method Stores and retrieves data to DB
- GET() method retrieves data from DB
- PUT() method Updates data in DB
- DELETE() method removes data in DB


+ Get() - basically in this API method. you only call API path and run.

RESTAPI - Responces:

- 200 - Request Completed successfully
- 201 - Created Successfully
- 400 - Invalid Request. Not existed or wrong format.
- 401 - Access Denied

JSON - Object that has key:pair relation


Function is called X();
Method is called Y.X(); - function starts with dot called method!

- Nodejs 3rd Part Libraries:
1. express           - Main purpose is creating and running server!
2. nodemon           - to get Data changes in realtime - not have to restart server everytime!
3. Cors body-parser  - to get Data from front-end and accept permissions. Useful in assigning permissions. Body-parser is for structure!

+ Body-parser is used for telling the data structure!

'facebook.com' - is Path
'/' - afterwards is called pages

NPM - is Node Package Manager
 - Basically it just opens package.json
 - for adding libraries
 - for executing commands specific

POSTMAN uses: 
- Application or softwre Useful for API testing without using Front-end!
- you tell your API's complete path, his method, as well as parameters

- You can also store your APIs and can use anywhere by import and export in form of .json file
- useful for ex: if you want API in office, or want in Home

#
### END OF THEORY ###
#

// NODE JS - Installation
1. Download & install Node JS from google
2. Create empty folder & open CMD from that folder
3. npm init
+ npm - node package manager
+ init - creates new project or package
4. give any class name, and press enter enter!
+ if not give any name, then it will create with default values
5. This will create 'package.json' file
6. Open all files in folder in VS Code through 'Code .' command
7. create 'index.js' file
8. To check if its working. Write 'console.log("Hello");'.


// Node JS Run / Execute?
- node index.js

// Node JS version?
- node --versionc

// Node js CMD commands
- npm init
- node --version
- node index.js

// 3rd Party Libraries - introduced in Nodejs to make things easier!

// Express Library - Installation
- ROOT Folder of your Project
- npm install express

> After installing libraries, there is 'node_modules' folder created, it contains libraries
> To check if library is installed or not ? Check packages.json, there is dependencies line on it!

// To Use or import Library in NodeJS .js ?
- const express = require('express');
- const app = express();

+ const is name of variable
+ require() - import from what?
+ express() function is stored in variable app


> Whenever you run your application, you run your App on hosted URL!
> Or run your Application in Specific Port!

> To run app locally, you define local port!
- const port = 5000;

// Create API locally
app.get('/', (request, responce) => {
  console.log('Hello world to first API');

}
)

+ User will call this API, this '/' path will be called, on behalf will run this function (req, res) => {}
+ request is the data Sent [by front-end user]
+ responce is the data Recieved [By Backend] 

> To get Responce of Text Back-end API, when Opening Front-end ? // To get responce after requesting ?
- responce.send("Hello to my API!!");


// to Run Server ?
- app.listen(Port, () => {
  console.log("Server is Running! ");
})
+ Check output from node index.js


// to Run API or show front-end ?
- localhost:5000/
- check output from Terminal!

// nodemon library - installation
- npm i nodemon
- open package.json, add new line in 'scripts'{}
- "start": "nodemon index.js",
- to run this 'start' key command!
- npm start


## PART - 2 ##

// Topics:
1) API Request
2) POSTMAN
3) Mongo DB Connection
4) Mongo DB Schema
5) Front End


// In Mongo DB - data is saved in collection-wise, and its structure is in .json format
// How to create Schema? (structure, variables saved in DB)


// Post API - for Dummy User Request

- app.post('/signup', (req, res) => {
 console.log(req, 'signup')
})

+ '/signup' is the web path. we can have same name, but use different methods like signup for .post and .get


- To Test API ?

- Download Postman
- Skip sign in and go to the App
- New Tab +
- Start your server by 'npm start'
- Paste your link as 'localhost:5000', select GET, and send
- Now Do it in 'localhost:5000/signup' with POST method

+ If used GET instead of Post then will throw Error not found!
+ Console.log() prints output at cmd line

- Since we are working as JSON based, our database is JSON based. So we need to add things!

- Go to 'Headers' in postmon, and add these lines:
- Accept - application/json

+ In Header, we write an object that tells our data is in JSON format so accept it

> TO SEND data from Frontend to Backend ?

- Go to 'Body' in Postman

+ Since we are going to send data in json form so:

- Select RAW and set TEXT to JSON
- For Ex: you want to send Email and password as JSON object?

- {
 "email" : "asif123@gmail.com",
 "password" : "12345"
}

> How to accept JSON data in Backend?

+ cors() - any Request from Front-end, it requires some permission needed by back-end application.
+ cors() - helps in assigning and accepting permissions automatically.
+ body-parser() - for structure, that our data will came in JSON stucture

- npm install cors body-parser
- Go to index.js
- const bd = require('body-parser')
- const cors = require('cors')
- app.use(cors())

+ app.use(cors()) - any permissions needed, will automatically assigns and allows them

- app.use(bd.urlencoded({
    extended: false
}))

+ Used for permissions
+ It tells that any data from front-end comes is in JSON form

- app.use(bd.json())

+ To Check front-end data in backend?
- Go to app.post()
- Console.log(req.body)

+> NOTE: Everything in Javascript is based on object!

+ req.body - returns all the data sent by front-end (PostMan) in json format

> To get any specific data?
- Console.log(req.body.email)

POST() & GET() - difference ?
- GET() - Get does not send any data, just directly hit API, and gives responce
- POST() - post for getting data i.e request from front-end, not possible with GET().

+ NOTE: when adding integer in Postman Body tab. don't use 0335, instead use 335, as it gives error

PostMan additional data in body: 

{
    "email" : "asif123@gmail.com",
    "password" : "123456",
    "contact" : 335323232,
    "education": ["matric", "college", "university"],
    "post": {
        "postName" : "Post One",
        "PostDate" : "15-Aug-2019"
    }
}

- console.log(req.body.education[0]) - for Array data
- console.log(req.body.post.postName) - for nested object
+ request. itself is an object!

// MongoDB - setup installation

- Go to mongoDB website, sign-up and setup
- Create new project with any name like nodejs_class
- 

1:06:00


