> Flutter default widget name in main.dart is "MyApp"

> if you change widget name to something, then widget_test.dart gives you error
> you can rename MyApp to any in widget test


> MaterialApp() is pre-defined class that gives you widget access
> Its like a package. if don't use, then certain widgets will not work
> Scaffold() is like page your App. has Appbar and body


> Alignments:

Row:
Main Axis : Left to right
Cross Axis: top to bottom

Column:
Main axis: top to bottom
cross axis: left to right

Alignments:

MainAxisAlignment.spaceBetween: High space
MainAxisAlignment.spaceEvenly: Mid space
MainAxisAlignment.spaceAround: Low space

in Widget. name starts with Capital first letter
in Widget's properties always starts with lower case first letter  i.e mainAxisAlignment: 
in properties's values always starts with capital first letter i.e MainAxisAlignment.center;

Widgets:

// For Spacing
SizedBox(height: , width: );

// make Any Widget Scrollable
SingleChildScrollView(child: );

?? ListView vs SingleChildScrollView?   > Listview for multiple, SCSV for single widget!

// Text Input
// Wrap with Container for width height adjustment
TextField();

// Button
// onPressed is required
ElevatedButton(onPressed: null, child: Text(""));


> Stateless vs Stateful class?
> Stateless - no changing on screen. runtime static
> stateful - changes screen on runtime


// Container() - Notes
> Center() widget centers widget with both width and height wise
> padding: EdgeInsets.all() works only with child. Inside
> margin: EdgeInsets.all() works only with Container(). Outside.

> EdgeInsets is class that tells Edges of widget.


// Gradient Color in Container()
- Container(decoration: 
BoxDecoration(
gradient: LinearGradient(colors: [Color.red, Color.green])
))

+ To use Gradient in AppBar() ?
- use flexibleSpace: property, with Container() gradient!


// Align() - Widget
> alignment: Alignment.bottomLeft
> Widget that changes alignment of our desired
> Similar to Center but has custom placement
> NOTE: when used with Column(), only works with topLeft/right/centre. Not BottomLRC!

// Color by Hex
color: Color(0xFF000000),
- 0xFF is the #
- 000000 is the 6 digit of color

// CircleAvatar() - Widget
- Radius: 100 is the size of circle
- backgroundColor: is the Color of Circle
- backgroundImage: is the Image
> use NetworkImage('URL') for internet
> use AssetImage('Path') from assets

// Stack() - Widget
- Used for placing Over-the-top widgets
- Positioned() - only used inside stack() widget

// Positioned() - Widget
- Used inside Stack() widget
- parameters are top,left,right with numbers
- Similar to padding()

// Responsive Size?
MediaQuery.of(context).size.height/width;
- % percentage of size acc. to device

MediaQuery.of(context).size.height*0.2;
> Means 20% of your device size


// Go to another Widget
Navigator.push(context, MaterialPageRoute(builder: (context) => WIDGET()));

// Exit from widget
Navigator.push(context);

// ListTile() - Widget
- leading: Start
- trailing: End
- title: Text
- subtitle: Text [bottom text]

> ListTile gives you Tile like ChatApp


// ListView.Builder() - widget
- itemCount: 1111
- itemBuilder: (context, index){
  return WIDGET();
  }

> Context - Jo bhi data aarha hota ha uska context dekhta ha
> BuildContext Context - knows the location of widget in a widget tree


GridView() - Can have more than one widget in single line, compared to single widget in single line in ListVew()


// GridView.count() - Widget
- crossAxisCount - [How Many Widgets in single line can have?]
- crossAxisSpacing - [Space Between each widgets in single line]
- mainAxisSpacing - [Space Between Up and Down of widgets]
- children: List.generate(length, (index){ 
  return WIDGET();
  })
> Height width of widgets automatically adjusted w.r.t to Grid Count


// List.generate()
- Useful for placing multiple widgets like for loop
- Arguments: length, (index) { return WIDGET(); })


// Drawer() - widget
- Used inside Scaffold(drawer: Drawer())
- child: ListView(children: [])
- DrawerHeader(child: ) - used inside ListView first


// For Tab view Navigation
// first Wrap Scaffold() with DefaultTabController(), then use TabBar() widget in Appbar title

// DefaultTabController() - widget
- length: [HOW MANY TABS?]
- child: Scaffold()

// TabBar() - widget
- Used inside AppBar( bottom: )    [can also use in title: ]
- tabs: []

// Tab() - Widget
- Used inside tabs: []
- child: Text()
- icon: 

> Top is initialized, to view Widgets body we need TabBarView inside Scaffold body:

// TabBarView() - Widget
- Used inside body: 
- Widgets should be == TabBar Length
- children: []
- indicatorColor : Line Color
- labelColor: Selected Text Color
- unselectedLabelColor: UnSelected Text Color


> Default State Management in flutter is setState((){});


// Creating Bottom Navigation bar

// Initialize variables and widgets
- int CurrentTab = 0;
- Widget CurrentScreen = WIDGET();

// PageStorage() widget
- used inside body: 
- bucket: PageStorageBucket()
- child: DefaultWidget()
> Aik class ha jis ma sari classain jo bhi call horhi hoti hen bottomNavigationBar ma wo sari classain aarhi hoti hen

// BottomAppBar() Widget
- used inside bottomNavigationBar: 
- color:
- child: Container(child: Row())

> In Row(), we use MaterialButtons

// MaterialButton() widget
- minWidth: 50/60
- onPressed: 
> onPressed: (){
  SetState((){
  CurrentScreen = WIDGET_1();
  currentTab = 1;
  })
}
> Vice-Versa

// To Highlight and De-Highlight MaterialButton icon
- child: Icon(Icon.Search, color: currentTab == [CURRENT_TAB] ? Colors.white : Colors.black ) 


// API Integration

// Json used: jsonplaceholder.typicode.com/users

// To Grab any Data from Json by name,username,email etc. We Create Model Class!
- Model Class with:
> Variables [username, password, email?]
> Constructor [this.username, this.password?]

Ex: class userModel{}

// Packages we download from pub.dev
// Most Common Packages for API : HTTP package
// Follow instructions on pub dev instalaltion

// Import Http package, also Alias him. by import 'dadasdas' as HTTP;
// Also import 'dart:convert', it contains jsonDecode() method!

// Method
// Async - used to wait until we get data from internet
// async in method stops method from running until we get data from internet. Used mostly if you have slow or no internet and App needs instant display of data.
// await - is applied to whom syntax should have to wait until yes or no reply.
// if don't use async - await, then function will run before data grab and will give error!

// Link we're getting from Http.get() is in JSON format. to Decode Json we used
// jsonDecode(responce.body) - as variable
// Data in jsonDecode is form in as List inside dictionaries List[Dict{}]

> WE want data to be in List[dictionaries], we created Empty list variable,
> then for loop. User Model class is used to add Dictionary-style data in List
> ending function with return List;

void getUser async{
  var responce = await HTTP.get(Uri.https('', ''));
  
  var JSONDecode = jsonDecode(responce.body);
  
  var users = [];
  
  for(var i in JSONDecode){
    userModel Userz = userModel(i["users"],i["username"],i["email"], i["company"]["name"]);
    users.add(Userz);
    
  }
  
  return users;

}

> i["company"]["name"] - is used list within list

// Uri.https() for https
// Uri.http() for http

// Uri.https(authority, unencoded)
- Authority is the 'XXXXXX.com' link
- unencoded is the post .com slash '/user/police/' links


// DISPLAY Data

// FutureBuilder() - widget
- used inside body:
- future: FUTURE_FUNCTION()
- builder: (context, snapshot){
  if(snapshot.data == null) { return WIDGET(); }
 
  else{
    ListView.Builder(
    itemCount: snapshot.data!.length
    itemBuilder: (context, index){
    
    return ListTile(
    
    title: SnapShot.data[index].name;
    
    );
    
    }
    );
  
  }
}

> (context, AsyncSnapShot snapshot) - is used to prevent, snapshot.data.length undefined error!
> To Display data by variable-name of class model: use snapshot.data[index].VARIABLE_NAME_IN_MODEL_CLASS;

> FutureBuilder() - checks if data is coming or not. he peeks at.






